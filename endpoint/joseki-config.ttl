# This file is written in N3 / Turtle

@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2005/06/configuration#> .
@prefix ja:     <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .


<> rdfs:label "Joseki Configuration File with TDB and named graphs".


<#server>  rdf:type joseki:Server ;
    # Example of some initialization code.
    joseki:initialization
        [ module:implementation 
            [ module:className <java:org.joseki.util.ServiceInitSimple> ;
              rdfs:label "Example initializer" ; ]
        ] ;
    .

# Service 2 - SPARQL processor for only handling a given dataset in a TDB directory

<#query>
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL-TDB" ;
    joseki:serviceRef   "sparql/query" ; 
   joseki:dataset      <#tdb-dataset> ;
   joseki:processor    joseki:ProcessorSPARQL ;
   .
    

<#update>
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL/Update" ;
    joseki:serviceRef   "sparql/update" ;
    joseki:dataset      <#tdb-dataset>;   
    joseki:processor    joseki:ProcessorSPARQLUpdate .

[] ja:loadClass "com.hp.hpl.jena.tdb.TDB"      . ## Initialize TDB.
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model      .

<#tdb-dataset> rdf:type      tdb:DatasetTDB ;
    tdb:location "Data" .


## --------------------------------------------------------------
## Processors

joseki:ProcessorSPARQL
    rdfs:label "General SPARQL processor" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # Parameters - this processor processes FROM/FROM NAMED
    joseki:allowExplicitDataset       "true"^^xsd:boolean ;
    joseki:allowWebLoading            "true"^^xsd:boolean ;
    ## And has no locking policy (it loads data each time).
    ## The default is mutex (one request at a time)
    joseki:lockingPolicy                joseki:lockingPolicyNone ;
    .

joseki:ProcessorSPARQLUpdate
    rdfs:label "SPARQL Update processor" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQLUpdate ;
    joseki:lockingPolicy              joseki:lockingPolicyMRSW ;
    .

joseki:ImplSPARQL
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:org.joseki.processors.SPARQL> .

joseki:ImplSPARQLUpdate
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:org.joseki.processors.SPARQLUpdate> .

# Local Variables:        
# tab-width: 4
# indent-tabs-mode: nil
# End:
